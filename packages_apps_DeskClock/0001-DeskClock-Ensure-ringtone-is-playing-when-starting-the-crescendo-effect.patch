From d270cf13c3c4de40b4dfedfb6ea237b5c9c8bcf0 Mon Sep 17 00:00:00 2001
From: Murat Kozan <muratkozan350@gmail.com>
Date: Sat, 4 Mar 2023 15:59:34 +0300
Subject: [PATCH] DeskClock: Ensure ringtone is playing when starting the
 crescendo effect

---
 .../deskclock/AsyncRingtonePlayer.java        | 29 +++++++++++++++++--
 1 file changed, 27 insertions(+), 2 deletions(-)

diff --git a/src/com/android/deskclock/AsyncRingtonePlayer.java b/src/com/android/deskclock/AsyncRingtonePlayer.java
index 02cad6f3b..9c0518153 100644
--- a/src/com/android/deskclock/AsyncRingtonePlayer.java
+++ b/src/com/android/deskclock/AsyncRingtonePlayer.java
@@ -255,6 +255,9 @@ private class RingtonePlaybackDelegate implements PlaybackDelegate {
         /** The current ringtone. Only used by the ringtone thread. */
         private Ringtone mRingtone;
 
+        /** The ringtone playback attempts counter. */
+        private int mRingtonePlayRetries = 0;
+
         /** The duration over which to increase the volume. */
         private long mCrescendoDuration = 0;
 
@@ -387,13 +390,35 @@ public void stop() {
         public boolean adjustVolume() {
             checkAsyncRingtonePlayerThread();
 
-            // If ringtone is absent or not playing, ignore volume adjustment.
-            if (mRingtone == null || !mRingtone.isPlaying()) {
+            // If ringtone is absent, ignore volume adjustment.
+            if (mRingtone == null) {
+                mCrescendoDuration = 0;
+                mCrescendoStopTime = 0;
+                return false;
+            }
+
+            // If ringtone is not playing, to avoid being muted forever recheck
+            // to ensure reliability.
+            if (!mRingtone.isPlaying()) {
+                if (mRingtonePlayRetries < 10) {
+                    mRingtonePlayRetries++;
+                    // Reuse the crescendo messaging looper to return here
+                    // again.
+                    return true;
+                }
+
+                mRingtonePlayRetries = 0;
                 mCrescendoDuration = 0;
                 mCrescendoStopTime = 0;
                 return false;
             }
 
+            if (mRingtonePlayRetries > 0) {
+                mRingtonePlayRetries = 0;
+                // Compute again the time at which the crescendo will stop.
+                mCrescendoStopTime = Utils.now() + mCrescendoDuration;
+            }
+
             // If the crescendo is complete set the volume to the maximum; we're done.
             final long currentTime = Utils.now();
             if (currentTime > mCrescendoStopTime) {
